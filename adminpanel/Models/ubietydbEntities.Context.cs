//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace adminpanel.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ubietydbEntities : DbContext
    {
        public ubietydbEntities()
            : base("name=ubietydbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressType> AddressTypes { get; set; }
        public virtual DbSet<Attendance> Attendances { get; set; }
        public virtual DbSet<AttendanceFlag> AttendanceFlags { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<EmpClient> EmpClients { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmpStatu> EmpStatus { get; set; }
        public virtual DbSet<EntityAddress> EntityAddresses { get; set; }
        public virtual DbSet<EntityType> EntityTypes { get; set; }
        public virtual DbSet<Login> Logins { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<attendancereport> attendancereports { get; set; }
        public virtual DbSet<attRepTemp> attRepTemps { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<GroupEmployee> GroupEmployees { get; set; }
        public virtual DbSet<GroupIncharge> GroupIncharges { get; set; }
        public virtual DbSet<GroupType> GroupTypes { get; set; }
        public virtual DbSet<ClaimHead> ClaimHeads { get; set; }
        public virtual DbSet<ClaimLine> ClaimLines { get; set; }
        public virtual DbSet<ClaimStatu> ClaimStatus { get; set; }
        public virtual DbSet<ClaimStatusHistory> ClaimStatusHistories { get; set; }
        public virtual DbSet<attByClient> attByClients { get; set; }
        public virtual DbSet<clientEmployee> clientEmployees { get; set; }
        public virtual DbSet<claimJSON> claimJSONs { get; set; }
    
        public virtual ObjectResult<getEmpOfGroups_Result> getEmpOfGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmpOfGroups_Result>("getEmpOfGroups");
        }
    
        public virtual ObjectResult<getEmpOfGroups1_Result> getEmpOfGroups1(Nullable<int> clientId, Nullable<int> groupId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmpOfGroups1_Result>("getEmpOfGroups1", clientIdParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<getAttendanceByClientsDays_Result1> getAttendanceByClientsDays(Nullable<int> clientId, Nullable<int> numDays)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("clientId", clientId) :
                new ObjectParameter("clientId", typeof(int));
    
            var numDaysParameter = numDays.HasValue ?
                new ObjectParameter("numDays", numDays) :
                new ObjectParameter("numDays", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAttendanceByClientsDays_Result1>("getAttendanceByClientsDays", clientIdParameter, numDaysParameter);
        }
    
        public virtual ObjectResult<string> getNextClaimNo(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getNextClaimNo", empIdParameter);
        }
    }
}
